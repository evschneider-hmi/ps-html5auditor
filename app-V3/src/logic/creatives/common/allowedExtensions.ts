/**
 * CM360 Allowed File Extensions Check
 * 
 * Validates that all files use approved extensions.
 * 
 * CM360 Requirements:
 * - Only specific file types are allowed
 * - Unsupported files may cause trafficking issues
 * - All files must have proper extensions
 * 
 * Allowed Extensions:
 * - HTML: .html, .htm
 * - Scripts: .js
 * - Styles: .css
 * - Images: .jpg, .jpeg, .gif, .png, .svg
 * - Data: .json, .xml
 * - Fonts: .eot, .otf, .ttf, .woff, .woff2
 */

import type { Check, CheckContext } from '../types';
import type { Finding } from '../../types';

// Allowed file extensions for CM360 creatives
const ALLOWED_EXTENSIONS = new Set([
  // HTML
  '.html',
  '.htm',
  
  // Scripts
  '.js',
  
  // Styles
  '.css',
  
  // Images
  '.jpg',
  '.jpeg',
  '.gif',
  '.png',
  '.svg',
  
  // Data
  '.json',
  '.xml',
  
  // Fonts
  '.eot',
  '.otf',
  '.ttf',
  '.woff',
  '.woff2'
]);

// OS artifact extensions that should be warnings (not hard failures)
// These are typically auto-generated by the OS and should be cleaned
const OS_ARTIFACT_EXTENSIONS = new Set([
  '.db',      // Thumbs.db (Windows)
  '.ds_store' // .DS_Store (macOS)
]);

// Check if a path is an OS artifact
function isOSArtifact(path: string): boolean {
  const lower = path.toLowerCase();
  
  // Check for __MACOSX resource fork directory
  if (lower.startsWith('__macosx/') || lower.includes('/__macosx/')) {
    return true;
  }
  
  // Check for OS artifact extensions
  const ext = lower.match(/\.[a-z0-9]+$/)?.[0];
  if (ext && OS_ARTIFACT_EXTENSIONS.has(ext)) {
    return true;
  }
  
  // Check for specific OS files
  const basename = lower.split('/').pop() || '';
  if (basename === 'thumbs.db' || basename === '.ds_store') {
    return true;
  }
  
  return false;
}

export const allowedExtensionsCheck: Check = {
  id: 'allowed-ext',
  title: 'Allowed File Extensions',
  description: 'CM360: Only typical creative extensions allowed (html, js, css, images, fonts, etc.). OS artifacts (Thumbs.db, .DS_Store, __MACOSX) trigger warnings.',
  profiles: ['CM360'],
  priority: 'required',
  tags: ['extensions', 'files', 'cm360'],
  
  execute(context: CheckContext): Finding {
    const { files } = context;
    
    const badExts: Array<{ path: string; detail: string }> = [];
    const osArtifacts: Array<{ path: string; detail: string }> = [];
    
    for (const filePath of files) {
      // Check for OS artifacts first (these are warnings, not failures)
      if (isOSArtifact(filePath)) {
        const lower = filePath.toLowerCase();
        let detail = '';
        if (lower.startsWith('__macosx/') || lower.includes('/__macosx/')) {
          detail = '__MACOSX (macOS resource fork)';
        } else if (lower.endsWith('thumbs.db')) {
          detail = 'Thumbs.db (Windows metadata)';
        } else if (lower.endsWith('.ds_store')) {
          detail = '.DS_Store (macOS metadata)';
        } else {
          detail = 'OS artifact';
        }
        osArtifacts.push({ path: filePath, detail });
        continue;
      }
      
      // Extract extension (case-insensitive)
      const match = filePath.toLowerCase().match(/\.[a-z0-9]+$/);
      const ext = match ? match[0] : '';
      
      // Check if extension is allowed
      if (!ext || !ALLOWED_EXTENSIONS.has(ext)) {
        badExts.push({
          path: filePath,
          detail: ext || '(no extension)'
        });
      }
    }
    
    const messages: string[] = [];
    
    // Report disallowed extensions (hard failures)
    if (badExts.length > 0) {
      messages.push(`Disallowed extension files: ${badExts.length}`);
      messages.push(
        'Allowed extensions: ' +
        Array.from(ALLOWED_EXTENSIONS).slice(0, 10).join(', ') + 
        '...'
      );
    } else {
      messages.push('All file extensions allowed');
    }
    
    // Report OS artifacts (warnings)
    if (osArtifacts.length > 0) {
      messages.push(`OS artifacts found: ${osArtifacts.length} (should be cleaned)`);
      const types = new Set<string>();
      if (osArtifacts.some(a => a.path.toLowerCase().includes('__macosx'))) {
        types.add('__MACOSX');
      }
      if (osArtifacts.some(a => a.path.toLowerCase().endsWith('thumbs.db'))) {
        types.add('Thumbs.db');
      }
      if (osArtifacts.some(a => a.path.toLowerCase().endsWith('.ds_store'))) {
        types.add('.DS_Store');
      }
      if (types.size > 0) {
        messages.push(`Found: ${Array.from(types).join(', ')}`);
      }
    }
    
    // Determine severity
    // FAIL only if truly disallowed extensions (not OS artifacts)
    // WARN if OS artifacts present but no disallowed extensions
    // PASS if clean
    let severity: 'FAIL' | 'WARN' | 'PASS';
    if (badExts.length > 0) {
      severity = 'FAIL';
    } else if (osArtifacts.length > 0) {
      severity = 'WARN';
    } else {
      severity = 'PASS';
    }
    
    // Combine offenders (bad extensions first, then OS artifacts)
    const allOffenders = [...badExts, ...osArtifacts];
    
    return {
      id: this.id,
      title: this.title,
      severity,
      messages,
      offenders: allOffenders
    };
  }
};
